#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
#include <deque>
#include <cassert>
#include <array>

struct QueueItem {
    int64_t maxNext;
    int64_t maxPrev;

    int64_t value;

    explicit QueueItem(int64_t value) {
        this->maxNext = -1;
        this->maxPrev = -1;
        this->value = value;
    }
};

struct QueueWithMax {
    std::vector<QueueItem> qu;

    int64_t front;
    int64_t maxFirst;

    int64_t maxSize;
    int64_t addition;

    void reset() {
        qu.clear();

        this->front = 0;
        this->maxSize = 1;
        this->addition = 0;

        this->maxFirst = -1;

        this->pushBack(0);
    }

    QueueWithMax() {
        reset();
    }

    void pushBack(int64_t value) {
        value -= addition;

        int64_t nextMaxItem = front == (int64_t)qu.size() ? -1 : qu.size() - 1;

        while (nextMaxItem != -1 && qu[nextMaxItem].value <= value) {
            nextMaxItem = qu[nextMaxItem].maxPrev;
        }

        qu.push_back(QueueItem(value));
        int64_t item = qu.size() - 1;

        if (nextMaxItem != -1) {
            qu[nextMaxItem].maxNext = item;
            qu[item].maxPrev = nextMaxItem;
        } else {
            this->maxFirst = item;
        }

        if (static_cast<int64_t >(qu.size()) - front > maxSize) {
            this->popFront();
        }
    }

    void popFront() {
        if (this->maxFirst == front) {
            this->maxFirst = qu[front].maxNext;
            qu[maxFirst].maxPrev = -1;
        }

        front++;
    }

    void incAdd(int64_t add) {
        this->addition += add;
    }

    int64_t max() {
        return qu[maxFirst].value + addition;
    }
};

const int64_t MAX_BACK_PACK_VOLUME = 100001;

int64_t number, volume;
std::vector<std::array<int64_t, 3>> things;
int64_t w_idx = 0, c_idx = 1, k_idx = 2;

std::vector<std::vector<int64_t>> matrix(2);

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    matrix[0].resize(MAX_BACK_PACK_VOLUME);
    matrix[1].resize(MAX_BACK_PACK_VOLUME);

    std::cin >> number >> volume;

    things.push_back({0, 0, 0});
    for (int64_t i = 1; i <= number; ++i) {
        int64_t wi, ci, ki;
        std::cin >> wi >> ci >> ki;
        things.push_back({wi, ci, ki});
    }

    QueueWithMax queue;

    for (int64_t ii = 1; ii <= number; ++ii) {
        matrix[1][0] = 0;

        for (int64_t jj = 1; jj <= things[ii][w_idx]; ++jj) {
            queue.reset();
            for(int64_t kk = jj; kk <= volume; kk += things[ii][w_idx]) {
                queue.maxSize = 1 + std::min(things[ii][k_idx], kk / things[ii][w_idx]);
                queue.incAdd(things[ii][c_idx]);
                queue.pushBack(matrix[0][kk]);
                matrix[1][kk] = queue.max();
            }
        }
        matrix[0].swap(matrix[1]);
    }
    std::cout << matrix[0][volume] << std::endl;
    return 0;
}

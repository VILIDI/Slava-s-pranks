#include <iostream>
#include <vector>
#include <algorithm>

int64_t Weight(int64_t number, int64_t volume, std::vector<std::vector<int64_t>> &things) {
    std::vector<std::vector<int64_t>> cost;
    for (int64_t i = 0; i <= number; ++i) {
        std::vector<int64_t> vec(volume+1, 0);
        cost.push_back(vec);
    }

    for (int64_t ii = 1; ii <= number; ++ii) {
        for (int64_t jj = 1; jj <= volume; ++jj) {
            cost[ii][jj] = cost[ii - 1][jj];
            int64_t wi = things[ii][0];
            int64_t ci = things[ii][1];
            int64_t ki = things[ii][2];
            for (int64_t ll = std::min(ki, (jj) / wi); ll > 0; --ll) {
                cost[ii][jj] = std::max(cost[ii][jj], cost[ii - 1][jj - ll * wi] + ci * ll);
            }
        }
    }
    return cost[number][volume];
}

int main() {
    int64_t number, volume;
    std::cin >> number >> volume;
    int64_t number_copy = number;
    std::vector<std::vector<int64_t>> things;
    things.push_back({0, 0, 0});
    for (int64_t i = 0; i < number; ++i) {
        int64_t wi, ci, ki;
        std::cin >> wi >> ci >> ki;
        if (wi <= volume) {
            things.push_back({wi, ci, ki});
        } else {
            --number_copy;
        }
    }
    std::cout << Weight(number_copy, volume, things);
    return 0;
}
